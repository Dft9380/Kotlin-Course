fun calculate(number: Number) {}

val number: Int = 1
calculate(number)

//////////////////////////////////////////////////////////////////////

fun calculate(number: Int) {}

val number: Number = 1
calculate(number) // Error: Type mismatch: inferred type is Number but Int was expected 

//////////////////////////////////////////////////////////////////////

val message: Any = "Important message"

//////////////////////////////////////////////////////////////////////

val message: Any = null  // Error: Null can not be a value of a non-null type Any

//////////////////////////////////////////////////////////////////////

val isNull: Any = false

//////////////////////////////////////////////////////////////////////

fun stringify(any: Any) {
    any?.toString()  // '?' can be omitted
    any!!.toString() // '!!' can be omitted
}

//////////////////////////////////////////////////////////////////////

val number1: Number = null // Error: Null can not be a value of a non-null type Number

//////////////////////////////////////////////////////////////////////

val number2: Number? = null // OK

//////////////////////////////////////////////////////////////////////

fun logCurrentState(): Unit { 
    println("Current state of a program: $state")
}

//////////////////////////////////////////////////////////////////////

fun updateState(state: State) { 
    logCurrentState()
    this.state = state
    logCurrentState()
}

val result: Unit = logCurrentState()

//////////////////////////////////////////////////////////////////////

fun fail(): Nothing {
    throw Exception("Fail!")
}

//////////////////////////////////////////////////////////////////////

fun throwIfNull(name: String?) {
    if (name == null){
      throw Exception("Name can't be null!")
    }
}
